// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestDirection {
  IN
  OUT
}

enum RequestStatus {
  SUCCESS
  FAIL
}

enum RequestInitiator {
  MBP
  WHAPI
  YANGO
  OCR_SPACE
}

enum CollectMethod {
  OCR
  CHAT
}

enum DocumentSide {
  FRONT
  BACK
}

enum DocumentType {
  DRIVER_LICENSE
  CAR_REGISTRATION
}

enum CarStatus {
  unknown
  working
  not_working
  repairing
  no_driver
  pending
}

enum StepExpectedResponseType {
  text
  image
  date
  url
}

enum StepBadResponseMessageErrorType {
  minSize
  maxSize
  minLength
  maxLength
  equalLength
  isExist
  isNotExist
  incorrectChoice
  isDate
  isExpire
}

enum HistoryConversationStatus {
  IN_PROGRESS
  FAIL
  SUCCEEDED
}

enum HistoryConversationReasonForEnding {
  ERROR
  TIME_LIMIT_REACHED
  NORMAL_FINISH
}

model Flow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  steps     Step[]
}

model Step {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  level                  Int
  message                String
  expectedResponse       String?
  expectedResponseType   StepExpectedResponseType @default(text)
  timeDelay              Int                      @default(2)
  flowId                 Int?
  flow                   Flow?                    @relation(fields: [flowId], references: [id])
  conversation           Conversation[]
  stepBadResponseMessage StepBadResponseMessage[]
  HistoryConversation    HistoryConversation[]
}

model StepBadResponseMessage {
  id        Int                             @id @default(autoincrement())
  createdAt DateTime                        @default(now())
  updatedAt DateTime                        @updatedAt
  message   String
  errorType StepBadResponseMessageErrorType
  stepId    Int
  step      Step                            @relation(fields: [stepId], references: [id])
}

model Conversation {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  whaPhoneNumber   String
  message          String
  badResponseCount Int      @default(0)
  stepId           Int
  step             Step     @relation(fields: [stepId], references: [id])
}

model RequestLog {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  direction RequestDirection
  initiator RequestInitiator
  data      String
  response  String?
  status    RequestStatus
}

model DocumentFile {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  dataImageUrl   String
  documentSide   DocumentSide
  documentType   DocumentType
  whaPhoneNumber String
}

model DriverPersonnalInfo {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastName          String
  firstName         String
  licenseNumber     String             @unique
  phoneNumber       String             @unique
  whaPhoneNumber    String             @unique
  address           String?
  collectMethod     CollectMethod?
  yangoProfileId    String?            @unique
  driverLicenseInfo DriverLicenseInfo?
}

model DriverLicenseInfo {
  id                  Int                  @id @default(autoincrement())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  driverPhoneNumber   String               @unique
  countryCode         String
  expiryDate          DateTime
  deliveryDate        DateTime
  idDriverPersInfo    Int?                 @unique
  driverPersonnalInfo DriverPersonnalInfo? @relation(fields: [idDriverPersInfo], references: [id])
}

model CarInfo {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  brand             String
  color             String
  year              String
  plateNumber       String    @unique
  status            CarStatus
  code              String
  driverPhoneNumber String    @unique
  yangoCarId        String?   @unique
}

model DriverCar {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  idDriver  Int      @unique
  idCar     Int      @unique
}

model HistoryConversation {
  id             Int                                 @id @default(autoincrement())
  createdAt      DateTime                            @default(now())
  updatedAt      DateTime                            @updatedAt
  whaPhoneNumber String
  stepId         Int?
  step           Step?                               @relation(fields: [stepId], references: [id])
  status         HistoryConversationStatus
  reason         HistoryConversationReasonForEnding?
}

model OtpVerification {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phoneNumber String
  otpCode     String
  expiresAt   DateTime
  isUsed      Boolean  @default(false)

  @@index([phoneNumber, otpCode])
}
